#-----------------------------------------------------------
# Vivado v2021.1 (64-bit)
# SW Build 3247384 on Thu Jun 10 19:36:07 MDT 2021
# 
# Start of session at: Tue Jun  7 22:52:36 2022
# Process ID: 281
# Current directory: /work
# Command line: vivado -mode tcl
# Log file: /work/vivado.log
# Journal file: /work/vivado.jou
#-----------------------------------------------------------
help synth_design
synth_design

Description: 
Synthesize a design using Vivado Synthesis and open that design

Syntax: 
synth_design  [-name <arg>] [-part <arg>] [-constrset <arg>] [-top <arg>]
              [-include_dirs <args>] [-generic <args>] [-verilog_define <args>]
              [-flatten_hierarchy <arg>] [-gated_clock_conversion <arg>]
              [-directive <arg>] [-rtl] [-bufg <arg>] [-no_lc]
              [-shreg_min_size <arg>] [-mode <arg>] [-fsm_extraction <arg>]
              [-rtl_skip_mlo] [-rtl_skip_ip] [-rtl_skip_constraints]
              [-srl_style <arg>] [-keep_equivalent_registers]
              [-resource_sharing <arg>] [-cascade_dsp <arg>]
              [-control_set_opt_threshold <arg>] [-incremental <arg>]
              [-max_bram <arg>] [-max_uram <arg>] [-max_dsp <arg>]
              [-max_bram_cascade_height <arg>] [-max_uram_cascade_height <arg>]
              [-retiming] [-no_srlextract] [-assert] [-no_timing_driven]
              [-sfcu] [-debug_log] [-quiet] [-verbose]

Returns: 
design object

Usage: 
  Name                          Description
  -----------------------------------------
  [-name]                       Design name
  [-part]                       Target part
  [-constrset]                  Constraint fileset to use
  [-top]                        Specify the top module name
  [-include_dirs]               Specify verilog search directories
  [-generic]                    Specify generic parameters. Syntax: -generic 
                                <name>=<value> -generic <name>=<value> ...
  [-verilog_define]             Specify verilog defines. Syntax: 
                                -verilog_define <macro_name>[=<macro_text>] 
                                -verilog_define <macro_name>[=<macro_text>] 
                                ...
  [-flatten_hierarchy]          Flatten hierarchy during LUT mapping. Values:
                                full, none, rebuilt
                                Default: rebuilt
  [-gated_clock_conversion]     Convert clock gating logic to flop enable. 
                                Values: off, on, auto
                                Default: off
  [-directive]                  Synthesis directive. Values: default, 
                                RuntimeOptimized, AreaOptimized_high, 
                                AreaOptimized_medium,AlternateRoutability, 
                                AreaMapLargeShiftRegToBRAM, 
                                AreaMultThresholdDSP, FewerCarryChains,Perfor
                                manceOptimized, LogicCompaction
                                Default: default
  [-rtl]                        Elaborate and open an rtl design
  [-bufg]                       Max number of global clock buffers used by 
                                synthesis
                                Default: 12
  [-no_lc]                      Disable LUT combining. Do not allow combining
                                LUT pairs into single dual output LUTs.
  [-shreg_min_size]             Minimum length for chain of registers to be 
                                mapped onto SRL
                                Default: 3
  [-mode]                       The design mode. Values: default, 
                                out_of_context
                                Default: default
  [-fsm_extraction]             FSM Extraction Encoding. Values: off, 
                                one_hot, sequential, johnson, gray, 
                                user_encoding, auto
                                Default: auto
  [-rtl_skip_mlo]               Skip mandatory logic optimization for RTL 
                                elaboration of the design; requires -rtl 
                                option.
  [-rtl_skip_ip]                Exclude subdesign checkpoints in the RTL 
                                elaboration of the design; requires -rtl 
                                option.
  [-rtl_skip_constraints]       Do not load and validate constraints against 
                                elaborated design; requires -rtl option.
  [-srl_style]                  Static SRL Implementation Style. Values: 
                                register, srl, srl_reg, reg_srl, reg_srl_reg
  [-keep_equivalent_registers]  Prevents registers sourced by the same logic 
                                from being merged. (Note that the merging can
                                otherwise be prevented using the synthesis 
                                KEEP attribute)
  [-resource_sharing]           Sharing arithmetic operators. Value: auto, 
                                on, off
                                Default: auto
  [-cascade_dsp]                Controls how adders summing DSP block outputs
                                will be implemented. Value: auto, tree, force
                                Default: auto
  [-control_set_opt_threshold]  Threshold for synchronous control set 
                                optimization to lower number of control sets.
                                Valid values are 'auto' and non-negative 
                                integers. The higher the number, the more 
                                control set optimization will be performed 
                                and fewer control sets will result. To 
                                disable control set optimization completely, 
                                set to 0.
                                Default: auto
  [-incremental]                Incremental synthesis directive with 
                                different strategies targeting at runtime or 
                                qor. Value of this is the strategy name.
  [-max_bram]                   Maximum number of block RAM allowed in 
                                design. (Note -1 means that the tool will 
                                choose the max number allowed for the part in
                                question)
                                Default: -1
  [-max_uram]                   Maximum number of Ultra RAM blocks allowed in
                                design. (Note -1 means that the tool will 
                                choose the max number allowed for the part in
                                question)
                                Default: -1
  [-max_dsp]                    Maximum number of block DSP allowed in 
                                design. (Note -1 means that the tool will 
                                choose the max number allowed for the part in
                                question)
                                Default: -1
  [-max_bram_cascade_height]    Controls the maximum number of BRAM that can 
                                be cascaded by the tool. (Note -1 means that 
                                the tool will choose the max number allowed 
                                for the part in question)
                                Default: -1
  [-max_uram_cascade_height]    Controls the maximum number of URAM that can 
                                be cascaded by the tool. (Note -1 means that 
                                the tool will choose the max number allowed 
                                for the part in question)
                                Default: -1
  [-retiming]                   Seeks to improve circuit performance for 
                                intra-clock sequential paths by automatically
                                moving registers (register balancing) across 
                                combinatorial gates or LUTs.  It maintains 
                                the original behavior and latency of the 
                                circuit and does not require changes to the 
                                RTL sources.
  [-no_srlextract]              Prevents the extraction of shift registers so
                                that they get implemented as simple registers
  [-assert]                     Enable VHDL assert statements to be 
                                evaluated. A severity level of failure will 
                                stop the synthesis flow and produce an error.
  [-no_timing_driven]           Do not run in timing driven mode
  [-sfcu]                       Run in single-file compilation unit mode
  [-debug_log]                  Print detailed log files for debugging
  [-quiet]                      Ignore command errors
  [-verbose]                    Suspend message limits during command 
                                execution

Categories: 
Tools

Description:

  Directly launches the Vivado synthesis engine to compile and synthesize a
  design in either Project Mode or Non-Project Mode in the Vivado Design
  Suite. Refer to the Vivado Design Suite User Guide: Design Flows Overview
  (UG892) for a complete description of Project Mode and Non-Project Mode.

  Vivado synthesis can be launched directly with the synth_design command in
  the Non-Project Mode of the Vivado Design Suite.

  Note: The synth_design can be multi-threaded to speed the process. Refer to
  the set_param command for more information on setting the
  general.maxThreads parameter.

  In Project Mode, synthesis should be launched from an existing synthesis
  run created with the create_run command. The run is launched using the
  launch_runs command, and this in turn calls synth_design for Vivado
  synthesis.

  You can also use the synth_design command to elaborate RTL source files,
  and open an elaborated design:

    synth_design -rtl -name rtl_1

  This command returns a transcript of the synthesis process, or returns an
  error if it fails.

Arguments:

  -name <arg> - (Optional) This is the name assigned to the synthesized
  design when it is opened by the Vivado tool after synthesis has completed.
  This name is for reference purposes, and has nothing to do with the
  top-level of the design or any logic contained within.

  -part <arg> - (Optional) The target Xilinx device to use for the design. If
  the part is not specified the default part assigned to the project will be
  used.

  -constrset <arg> - (Optional) The name of the XDC constraints to use when
  synthesizing the design. Vivado synthesis requires the use of XDC, and does
  not support UCF. The -constrset argument must refer to a constraint fileset
  that exists. It cannot be used to create a new fileset. Use the
  create_fileset command for that purpose.

  -top <arg> - (Optional) The top module of the design hierarchy.

  Note: If you use the find_top command to define the -top option, be sure to
  specify only one top if find_top returns multiple prospects. See the
  examples below.

  -include_dirs <args> - (Optional) The directories to search for Verilog
  `include files. You can specify multiple directories by creating a list to
  contain them:

    -include_dirs {C:/data/include1 C:/data/include2}

  -generic <name>=<value> - (Optional) The value of a VHDL generic entity, or
  of a Verilog parameter. The -generic option can be used to override the
  assigned values of parameters in the RTL design sources. However it can
  only override parameters at the top level of the design. The parameters of
  lower-level modules can only be overridden at the time of instantiation and
  not by the -generic option. The syntax for the -generic argument is
  <name>=<value>, specifying the name of the generic or parameter, and the
  value to be assigned. Repeat the -generic option multiple times in the
  synth_design command for each generic or parameter value to be defined:

    synth_design -generic width=32 -generic depth=512 ...

  Note: When specifying binary values for boolean or std_logic VHDL generic
  types, you must specify the value using the Verilog bit format, rather than
  standard VHDL format:

    0 = 1`b0  
    01010000 = 8`b01010000

  -verilog_define <name>=<text> - (Optional) Set values for Verilog `define,
  and `ifdef, statements. The syntax for the -verilog_define argument is
  <name>=<text>, specifying the name of the define directive, and the value
  to be assigned. The argument can be reused multiple times in a single
  synth_design command.

    synth_design -verilog_define <name>=<value> -verilog_define <name>=<value> ...

  -flatten_hierarchy <arg> - (Optional) Flatten the hierarchy of the design
  during LUT mapping. The valid values are:

   *  rebuilt - This will attempt to rebuild the original hierarchy of the
      RTL design after synthesis has completed. This is the default setting.

   *  full - Flatten the hierarchy of the design.

   *  none - Do not flatten the hierarchy of the design. This will preserve
      the hierarchy of the design, but will also limit the design
      optimization that can be performed by the synthesis tool.

  -gated_clock_conversion <arg> - (Optional) Convert clock gating logic to
  use the flop enable pins when available. This optimization can eliminate
  logic and simplify the netlist. Refer to the GATED_CLOCK property in the
  Vivado Design Suite User Guide: Synthesis (UG901) for more information.
  Valid values for this option are:

   *  off - Disables the conversion of clock gating logic during synthesis,
      regardless of the use of the GATED_CLOCK property in the RTL design.

   *  on - Converts clock gating logic based on the use of the GATED_CLOCK
      property in the RTL design.

   *  auto - lets Vivado synthesis perform gated clock conversion if either
      the GATED_CLOCK property is present in the RTL, or if the Vivado tool
      detects a gate with a valid clock constraint.

  -directive <arg> - (Optional) Direct synthesis to achieve specific design
  objectives. Only one directive can be specified for a single synth_design
  command, and values are case-sensitive. Valid values are:

   *  default - Run the default synthesis process.

   *  runtimeoptimized - Perform fewer timing optimizations and eliminate
      some RTL optimizations to reduce synthesis run time.

   *  AreaOptimized_high - Perform general area optimizations including
      AreaMapLargeShiftRegToBRAM, AreaThresholdUseDSP directives.

   *  AreaOptimized_medium - Perform general area optimizations including
      forcing ternary adder implementation, applying new thresholds for use
      of carry chain in comparators, and implementing area optimized
      multiplexers.

   *  AlternateRoutability - Algorithms to improve routability with reduced
      use of MUXFs and CARRYs.

   *  AreaMapLargeShiftRegToBRAM - Detects large shift registers and
      implements them using dedicated blocks of RAM.

   *  AreaMultThresholdDSP - Lower threshold for dedicated DSP block
      inference for packing multipliers.

   *  FewerCarryChains - Higher operand size threshold to use LUTs instead of
      the carry chain.

   *  PerformanceOptimized - Perform general timing optimizations including
      logic level reduction at the expense of area.

  -rtl - (Optional) Elaborate the HDL source files and open the RTL design.
  In designs that use out-of-context (OOC) modules, such as IP from the
  Xilinx IP catalog, the Vivado Design Suite will import synthesized design
  checkpoints (DCP) for the OOC modules in the design, and import associated
  constraint files (XDC) into the elaborated design. However, you can disable
  the default behavior using the -rtl_skip_ip and -rtl_skip_constraints
  options.

  -rtl_skip_ip - (Optional) This option requires the use of the -rtl option.
  When elaborating the RTL design, this option causes the Vivado Design Suite
  to skip loading the DCP files for OOC modules in the design, and instead
  load a stub file to treat the OOC modules as black boxes. This can
  significantly speed elaboration of the design.

  Note: An OOC synthesis run will be needed in either case to generate the
  DCP file that is loaded during elaboration, or to generate the stub file
  needed for the black box.

  -rtl_skip_constraints - (Optional) This option requires the use of the -rtl
  option. When elaborating the RTL design, this option causes the Vivado
  Design Suite to skip loading any design constraints (XDC) into the
  elaborated design. This can significantly speed elaboration of the design.

  -bufg <arg> - (Optional) Specify the maximum number of global clock buffers
  to be used on clock nets during synthesis. Specified as a value >= 1, which
  should not exceed the BUFG count on the target device. The default value is
  12.

  Note: Vivado synthesis infers up to the number of BUFGs specified,
  including those instantiated in the RTL source. For example, with the
  default setting of -bufg 12, if there are three BUFGs instantiated in the
  RTL, the tool infers up to nine more for a total of 12.

  -no_lc - (Optional) Disable the default LUT combining feature of Vivado
  synthesis.

  -shreg_min_size <arg> - (Optional) Specified as an integer, this is the
  minimum length for a chain of registers to be mapped onto SRL. The default
  is three.

  -mode [ default | out_of_context ] - (Optional) Out of Context mode
  specifies the synthesis of an IP module, or block module, for use in an
  out-of-context design flow. This mode turns off I/O buffer insertion for
  the module, and marks the module as OOC, to facilitate its use in the tool
  flow. The block can also be implemented for analysis purposes. Refer to the
  Vivado Design Suite User Guide: Designing with IP (UG896) or the Vivado
  Design Suite User Guide: Hierarchical Design (UG905) for more information.

  -fsm_extraction <arg> - (Optional) Finite state machine (FSM) encoding is
  automatic (auto) in Vivado synthesis by default. This option enables state
  machine identification and specifies the type of encoding that should be
  applied. Valid values are: off, one_hot, sequential, johnson, gray, auto.
  Automatic encoding (auto) allows the tool to choose the best encoding for
  each state machine identified. In this case, the tool may use different
  encoding styles for different FSMs in the same design.

  Note: Use -fsm_extraction off to disable finite state machine extraction in
  Vivado synthesis. This will override the FSM_ENCODING property when
  specified.

  -keep_equivalent_registers - (Optional) Works like the KEEP property to
  prevent the merging of registers during optimization.

  -resource_sharing <arg> - (Optional) Share arithmetic operators like adders
  or subtractors between different signals, rather than creating new
  operators. This can result in better area usage when it is turned on. Valid
  values are: auto, on, off. The default is auto.

  -cascade_dsp [ auto | tree | force ] - (Optional) Specifies how to
  implement adders that add DSP block outputs. Valid values include auto,
  tree, force. The default setting is auto.

  -control_set_opt_threshold <arg> - (Optional) Threshold for synchronous
  control set optimization to decrease the number of control sets. Specifies
  how large the fanout of a control set should be before it starts using it
  as a control set. For example, if -control_set_opt_threshold is set to 10,
  a synchronous reset that only fans out to 5 registers would be moved to the
  D input logic, rather than using the reset line of a register. However, if
  -control_set_opt_threshold is set to 4, then the reset line is used. This
  option can be specified as "auto", or as an integer from 0 to 16. The
  default setting is "auto", and the actual threshold used under "auto" can
  vary depending on the selected device architecture.

  -incremental <arg> - (Optional)  Direct synthesis to run a specific synthesis
  mode to facilitate incremental synthesis. Valid values are off, quick, default
  and aggressive.

   * off - disables incremental synthesis
   
   * quick - this is quickest of incremental Synthesis, elementary synthesis
     optimizations in both,  reference and incremental Synthesis
  
   * default - this is balanced option between runtime and QoR, default synthesis
     optimizations in reference and reduced optimizations in incremental Synthesis
  
   * aggressive - this option gives best QoR, default synthesis optimizations in
     reference and all optimizations in incremental Synthesis


  -max_bram <arg> - (Optional) Specify the maximum number of Block RAM to add
  to the design during synthesis. Specify a value >= 1, which should not
  exceed the available BRAM count on the target device. If a value of -1 is
  used, the Vivado synthesis tool will not exceed the available Block RAM
  limit of the device. The default value is -1.

  Note: A value of 0 directs Vivado synthesis to not infer BRAMs in the
  design, but is not a recommended value.

  -max_uram <arg> - (Optional) Specify the maximum number of Ultra RAM blocks
  (URAM) to add to the design during synthesis. Specify a value >= 1, which
  should not exceed the available URAM count on the target device. If a value
  of -1 is used, the Vivado synthesis tool will not exceed the available URAM
  block limit of the device. The default value is -1.

  Note: A value of 0 directs Vivado synthesis to not infer URAM in the
  design, but is not a recommended value.

  -max_dsp <arg> - (Optional) Specify the maximum number of DSPs to add to
  the design during synthesis. Specify a value >= 1, which should not exceed
  the available DSP count on the target device. If a value of -1 is used, the
  Vivado synthesis tool will not exceed the available limit of the device.
  The default value is -1.

  Note: A value of 0 directs Vivado synthesis to not infer DSPs in the
  design, but is not a recommended value.

  -max_bram_cascade_height <arg> - (Optional) Controls the maximum number of
  BRAM that can be cascaded by the tool. A value of -1 lets Vivado synthesis
  choose up to the maximum number allowed for the target part. The default
  value is -1.

  -max_uram_cascade_height <arg> - (Optional) Controls the maximum number of
  URAM that can be cascaded by the tool. A value of -1 lets Vivado synthesis
  choose up to the maximum number allowed for the target part. The default
  value is -1.

  -retiming - (Optional) Seeks to improve circuit performance for intra-clock
  sequential paths by automatically moving registers (register balancing)
  across combinatorial gates or LUTs. It maintains the original behavior and
  latency of the circuit and does not require changes to the RTL sources.

  -no_srlextract - (Optional) Prevents the extraction of shift registers so
  that they get implemented as simple registers.

  -assert - (Optional) Enable VHDL assert statements to be evaluated. A
  severity level of failure will stop the synthesis flow and produce an
  error.

  -no_timing_driven - (Optional) Disables the default timing driven synthesis
  algorithm. This results in a reduced synthesis runtime, but ignores the
  effect of timing on synthesis.

  -debug_log - (Optional) Prints an extended log file that is useful for
  debugging. Will have extra info about logic that was trimmed along with
  sections on the sizes of the RTL partitions and RTL Components. In addition
  there will be more INFO/WARNING messages that are often ignored.

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  -verbose - (Optional) Temporarily override any message limits and return
  all messages from this command.

  Note: Message limits can be defined with the set_msg_config command.

Examples:

  The following example uses the set_property command to define the target
  part for the active project, then elaborates the source files and opens an
  RTL design:

    set_property part xc7vx485tffg1158-1 [current_project]  
    synth_design -rtl -name rtl_1

  Note: The default source set, constraint set, and part will be used in this
  example.

  The following example uses the find_top command to define the top of the
  current design for synthesis:

    synth_design -top [lindex [find_top] 0]

  Note: Since find_top returns multiple possible candidates, choosing index 0
  chooses the best top candidate for synthesis.

  The following example runs synthesis on the current design, defining the
  top module and the target part, and specifying no flattening of the
  hierarchy. The results of the synthesis run are then opened in a netlist
  design:

    synth_design -top top -part xc7k70tfbg676-2 -flatten_hierarchy none  
    open_run synth_1 -name netlist_1

See Also:

   *  create_ip_run
   *  create_run
   *  current_design
   *  current_project
   *  find_top
   *  open_run
   *  opt_design
   *  report_seu
   *  set_property
help opt_design
opt_design

Description: 
Optimize the current netlist. This will perform the retarget, propconst, sweep and bram_power_opt optimizations by default.

Syntax: 
opt_design  [-retarget] [-propconst] [-sweep] [-bram_power_opt] [-remap]
            [-aggressive_remap] [-resynth_remap] [-resynth_area]
            [-resynth_seq_area] [-directive <arg>] [-muxf_remap]
            [-hier_fanout_limit <arg>] [-bufg_opt] [-mbufg_opt]
            [-shift_register_opt] [-dsp_register_opt] [-srl_remap_modes <arg>]
            [-control_set_merge] [-merge_equivalent_drivers] [-carry_remap]
            [-debug_log] [-property_opt_only] [-quiet] [-verbose]

Usage: 
  Name                         Description
  ----------------------------------------
  [-retarget]                  Retarget
  [-propconst]                 Propagate constants across leaf-level 
                               instances
  [-sweep]                     Remove unconnected leaf-level instances
  [-bram_power_opt]            Perform Block RAM power optimizations
  [-remap]                     Remap logic optimally in LUTs
  [-aggressive_remap]          High effort remap optimization
  [-resynth_remap]             High effort re-synthesis to reduce the depth 
                               of logic in critical timing paths
  [-resynth_area]              Resynthesis
  [-resynth_seq_area]          Resynthesis (with Sequential optimizations)
  [-directive]                 Mode of behavior (directive) for this command.
                               Please refer to Arguments section of this help
                               for values for this option
                               Default: Default
  [-muxf_remap]                Optimize all MuxFx cells to LUT3
  [-hier_fanout_limit]         Replicate by module with threshold N
  [-bufg_opt]                  Insert, Merge and Split BUFGs
  [-mbufg_opt]                 Merge BUFGs to MBUFGs
  [-shift_register_opt]        Pull register stage from shift register
  [-dsp_register_opt]          Push/Pull Registers out of a DSP
  [-srl_remap_modes]           remap shift registers to flops or flops to 
                               shift registers
  [-control_set_merge]         Merge all equivalent control set drivers to a 
                               single driver
  [-merge_equivalent_drivers]  Merge all LUT,Flop equivalent driver 
                               replications
  [-carry_remap]               reamp carries into luts
  [-debug_log]                 show debug message
  [-property_opt_only]         Do targeted optimizations on tagged cells
  [-quiet]                     Ignore command errors
  [-verbose]                   Suspend message limits during command 
                               execution

Categories: 
Tools

Description:

  Optimizes a design netlist for the target part. Optimization can provide
  improvements to synthesized netlists from third-party tools, or for
  netlists that may not have been optimized during synthesis.

  Run this command after synthesis but prior to implementation to optimize
  the design and simplify the netlist before placing and routing the design.
  Assign the DONT_TOUCH property to prevent the optimization of individual
  cells.

  Tip: To see what actions opt_design is taking in optimizing your design,
  you can use the -verbose option to get a more detailed transcript of the
  process. This can help you in understanding and debugging some of the
  changes made to your design.

  The opt_design command performs the following optimizations by default:

   *  Retarget

   *  Constant Propagation

   *  Sweep

   *  Global Buffer (BUFG) optimizations

   *  DSP Register optimizations

   *  Shift-Register Logic optimizations

   *  Block RAM Power optimizations

   *  Implement MIG cores

   *  Implement Debug cores

  Important: Using command-line options for specific optimizations results in
  opt_design performing only the specified optimizations and disabling all
  others, even the ones that are usually performed by default.

  To perform LUT Remapping, you must specify -remap.

  To perform area-based re-synthesis, you must specify -resynth_area, or
  -directive ExploreArea.

  To perform sequential area-based re-synthesis, you must specify
  -resynth_seq_area, or -directive ExploreSequentialArea.

Arguments:

  -retarget - (Optional) Retarget one type of block to another when
  retargetting the design from one device family to another. For example,
  retarget instantiated MUXCY or XORCY components into a CARRY4 block; or
  retarget DCM to MMCM. The retarget optimization also absorbs inverters into
  downstream logic where possible.

  Note: The -retarget argument is optional, as are the other optimizations.
  However this optimization is run by default unless explicitly overridden by
  another optimization.

  -propconst - (Optional) Propagate constant inputs through the circuit,
  resulting in a simplified netlist. Propagation of constants can eliminate
  redundant combinational logic from the netlist.

  -sweep - (Optional) Remove unnecessary logic, removing loadless cells and
  nets. Additional optimization can be performed such as tie-off, register
  replication driving multiple OBUF, IBUF/OBUF insertion, retargeting dual
  port RAM to single port RAM, and optimizing IDELAYCTRL by grouping IO.

  -bram_power_opt - (Optional) Enables power optimization on Block RAM cells.
  Changes the WRITE_MODE on unread ports of true dual-port RAMs to NO_CHANGE,
  and applies intelligent clock gating to Block RAM outputs.

  Note: Specific BRAM cells can be excluded from this optimization using the
  set_power_opt command.

  -remap - (Optional) Remap the design to combine multiple LUTs into a single
  LUT to reduce the depth of the logic.

  -aggressive_remap - (Optional) Similar to the -remap option to reduce LUT
  logic depth but more exhaustive. This may reduce more LUT levels at the
  expense of longer optimization runtime.

  -resynth_area - (Optional) Perform re-synthesis in area mode to reduce the
  number of LUTs.

  -resynth_seq_area - (Optional) Perform re-synthesis to reduce both
  combinational and sequential logic. Performs a superset of the optimization
  provided by -resynth_area.

  -resynth_remap - (Optional) Remap the design to improve the critical paths
  in timing-driven mode by performing re-synthesis to reduce the depth of
  logic. This timing-based approach will replicate LUT's with fanout and
  collapse smaller LUT's into bigger functions at the expense of longer
  optimization runtime..

  -directive <arg> - (Optional) Direct the mode of optimization with specific
  design objectives. Only one directive can be specified for a single
  opt_design command, and values are case-sensitive. Supported values
  include:

   *  Explore - Run multiple passes of optimization to improve results.

   *  ExploreArea - Run multiple passes of optimization, with an emphasis on
      reducing area.

   *  ExploreWithRemap - Similar to ExploreArea but adds the remap
      optimization to compress logic levels.

   *  ExploreSequentialArea - Run multiple passes of optimization, with an
      emphasis on reducing registers and related combinational logic.

   *  AddRemap - Run the default optimization, and include LUT remapping to
      reduce logic levels.

   *  NoBramPowerOpt - Runs opt_design without the default BRAM power
      optimization.

   *  RuntimeOptimized - Run the fewest iterations, trading optimization
      results for faster runtime.

   *  RQS - Instructs opt_design to select the opt_design directive specified
      by the report_qor_suggestion strategy suggestion. Requires an RQS file
      with a strategy suggestion to be read in prior to calling this
      directive. See report_qor_suggestions -help for more details.

   *  Default - Run the default optimization.

  Refer to the Vivado Design Suite User Guide: Implementation (UG904) for
  more information on the effects of each directive.

  Note: The -directive option controls the overall optimization strategy, and
  is not compatible with any specific optimization options. It can only be
  used with -debug_log, -quiet and -verbose.

  -muxf_remap - (Optional) Convert MUXFs to LUT3s opportunistically when it
  can potentially improve route-ability of the design without affecting
  timing.

  -hier_fanout_limit <arg> - (Optional) Net drivers with fanout greater than
  the specified limit (<arg>) will be replicated according to the logical
  hierarchy. For each hierarchical instance driven by the high-fanout net, if
  the fanout within the hierarchy is greater than the specified limit, then
  the net within the hierarchy is driven by a replica of the driver of the
  high-fanout net. The minimum value for hier_fanout_limit is 512.

  -bufg_opt - (Optional) Perform various optimizations related to global
  buffers (BUFG/BUFGCE): Insert a buffer on unbuffered clock nets (fanout >
  30). Insert BUFGs on high fanout nets where the control set pin count on
  the net exceeds the tool threshold. Perform load-splitting when a
  high-fanout net drives both combinational and sequential logic: the
  combinational portion bypasses the BUFG because the added delay is too
  large.

  Tip: The phys_opt_design command can be used to optimize the combinational
  portion, while the sequential portion can be driven by BUFG.

  -mbufg_opt - (Optional) MBUFG optimization transforms parallel clock
  buffers driven by a common driver, or clock modifying blocks (CMB) such as
  MMCM, DPLL, or XPLL, to MBUFG.

  -shift_register_opt - (Optional) For high-fanout nets originating from an
  SRL, add output register pipeline stages to improve timing prior to the
  high-fanout net replication. This optimization is performed as part of the
  default optimization.

  -dsp_register_opt - (Optional) Pull registers out of a DSP, or push
  registers into a DSP, to improve timing and resource utilization as needed.
  This optimization is performed as part of the default optimization.

  -srl_remap_modes <args> - (Optional) Many designs have timing closure
  issues related to deep SRLs, and long register chains. This option provides
  both an automatic rule to trigger remapping between FF chains and SRLs, and
  also a manual rule to specify when to convert a FF chain to an SRL, or an
  SRL to a FF chain. Automatic remapping starts with the longest FF chains
  and converts those to SRLs when needed to reduce FF utilization, and takes
  the shallowest SRLs and converts those to FF chains when needed to reduce
  LUT utilization. Manual remapping takes FF chains in excess of specified
  lengths and remaps them to SRLs, and takes SRLs with specified depths and
  remaps them to FF chains. The automatic and manual modes cannot both be
  used in the same opt_design command pass. The following shows the syntax
  for the automatic and manual rules:

   *  Automatic:

       -  -srl_remap_modes {{target_ff_util <util> target_lutram_util
          <util>}}: Where <util> is a number from 0 to 100 expressed as a
          percentage of utilization. When either FF or LUTs exceed the
          specified utilization, the tool remaps as needed. When both
          utilization rates are exceeded neither is remapped.

   *  Manual:

       -  -srl_remap_modes {{min_depth_ffs_to_srl <val>}{max_depth_srl_to_ffs
          <val>}}: Where <val> specifies the depth of an SRL or length of a
          FF chain. When a FF chain is greater than the specified min value,
          the chain is remapped to an SRL with the required depth. If an SRL
          has depth less than or equal to the specified max value, the SRL is
          remapped to a FF chain.

  -control_set_merge - (Optional) Reduce the drivers of logically-equivalent
  control signals to a single driver. This is like a reverse fanout
  replication, and results in nets that are better suited for module-based
  replication.

  -merge_equivalent_drivers - (Optional) This option merges equivalent
  drivers on both control signals and non-control signals, to reduce logic in
  the design.

  -carry_remap - (Optional) Remap carry signals into LUTs.

  -debug_log - (Optional) Generate log file for debugging purposes.

  -property_opt_only - (Optional) Indicates that the opt_design command
  should be driven only by properties on objects in the design, and not by
  the options defined as part of the command syntax. Refer to the Vivado
  Design Suite Properties Reference Guide (UG912) for more information on
  specific properties. The following properties trigger property-only
  optimizations: CARRY_REMAP, CONTROL_SET_REMAP, EQUIVALENT_DRIVER_OPT,
  LUT_REMAP, MUXF_REMAP, REG_TO_SRL, SRL_STAGES_TO_REG_INPUT,
  SRL_STAGES_TO_REG_OUTPUT, SRL_TO_REG.

  Tip: When -property_opt_only is specified, the tool will return an error if
  additional optimizations have been specified in the opt_design command.

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  -verbose - (Optional) Temporarily override any message limits and return
  all messages from this command. This option displays detailed information
  about the logic that is affected by each optimization.

Examples:

  The following example performs all four default optimizations: retarget,
  constant propagation, sweep, and BRAM power optimization. The command
  returns detailed results with the -verbose switch:

    opt_design -verbose

  This example excludes specific BRAM cells from power optimization using the
  set_power_opt command, and then runs opt_design with the four default
  optimizations:

    set_power_opt -exclude_cells [get_cells \
       -filter {PRIMITIVE_TYPE =~ BMEM.*.*} \
       -of_objects [get_pins -leaf -filter {DIRECTION == IN} \
       -of_objects [get_nets -of_objects [get_pins clock/bufgctrl_clk_mld/O]]]]
    opt_design

  The following example performs the sweep and retarget optimizations:

    opt_design -sweep -retarget

  Note: Because -sweep and -retarget are expressly enabled in the prior
  example, -propconst optimization and -bram_power_opt are implicitly
  disabled.

  The following example directs the opt_design command to use various
  algorithms to achieve potentially better results:

    opt_design -directive Explore

  The following example directs the opt_design command to use various
  algorithms to achieve potentially better results, while focusing on area
  reduction:

    opt_design -directive ExploreArea

  This example uses the -srl_remap_modes argument with the automatic option
  to convert FF chains into SRLs when FF utilization is greater than 20%, or
  SRLs into FF chains when SRL utilization is over 50%:

    -srl_remap_modes {{target_ff_util 20 target_lutram_util 50}}

  Tip: In this case, the srl_remap is only performed if either specified
  utilization rate is exceeded, but NOT if both are exceeded.

  The following example uses the -srl_remap_modes argument with the manual
  option to convert FF chains with length greater than 5 to SRLs, and SRLs
  with depth less than or equal to 8 to FF chains:

    -srl_remap_modes {{min_depth_ffs_to_srl 5}{max_depth_srl_to_ffs 8}}

See Also:

   *  phys_opt_design
   *  place_design
   *  power_opt_design
   *  route_design
   *  set_power_opt
   *  synth_design
help write_verilog
write_verilog

Description: 
Export the current netlist in Verilog format

Syntax: 
write_verilog  [-cell <arg>] [-mode <arg>] [-lib] [-port_diff_buffers]
               [-write_all_overrides] [-keep_vcc_gnd] [-rename_top <arg>]
               [-sdf_anno <arg>] [-sdf_file <arg>] [-force]
               [-include_xilinx_libs] [-logic_function_stripped] [-quiet]
               [-verbose] <file>

Returns: 
the name of the output file or directory

Usage: 
  Name                        Description
  ---------------------------------------
  [-cell]                     Root of the design to write, e.g. 
                              des.subblk.cpu
                              Default: whole design
  [-mode]                     Values: design, pin_planning, synth_stub, sta, 
                              funcsim, timesim
                              Default: design
  [-lib]                      Write each library into a separate file
  [-port_diff_buffers]        Output differential buffers when writing in 
                              -port mode
  [-write_all_overrides]      Write parameter overrides on Xilinx primitives 
                              even if the override value is the same as the 
                              default value
  [-keep_vcc_gnd]             Don't replace VCC/GND instances by literal 
                              constants on load terminals.  For simulation 
                              modes only.
  [-rename_top]               Replace top module name with custom name e.g. 
                              netlist
                              Default: new top module name
  [-sdf_anno]                 Specify if sdf_annotate system task statement 
                              is generated
  [-sdf_file]                 Full path to sdf file location
                              Default: <file>.sdf
  [-force]                    Overwrite existing file
  [-include_xilinx_libs]      Include simulation models directly in netlist 
                              instead of linking to library
  [-logic_function_stripped]  Convert INIT strings on LUTs & RAMBs to fixed 
                              values.  Resulting netlist will not behave 
                              correctly.
  [-quiet]                    Ignore command errors
  [-verbose]                  Suspend message limits during command execution
  <file>                      Which file to write

Categories: 
FileIO, Simulation

Description:

  Write a Verilog netlist of the current design or from a specific cell of
  the design to the specified file or directory. The output is a IEEE
  1364-2001 compliant Verilog HDL file that contains netlist information
  obtained from the input design files.

  You can output a complete netlist of the design or specific cell, or output
  a port list for the design, or a Verilog netlist for simulation or static
  timing analysis.

Arguments:

  -cell <arg> - (Optional) Write the Verilog netlist from a specified cell or
  block level of the design hierarchy. The output Verilog file or files will
  only include information contained within the specified cell or module.

  -mode <arg> - (Optional) The mode to use when writing the Verilog file. By
  default, the Verilog netlist is written for the whole design. Valid mode
  values are:

   *  design - Output a Verilog netlist for the whole design. This acts as a
      snapshot of the design, including all post placement, implementation,
      and routing information in the netlist.

   *  pin_planning - Output only the I/O ports for the top-level of the design.

   *  synth_stub - Output the ports from the top-level of the design for use
      as a synthesis stub.

   *  sta - Output a Verilog netlist to be used for static timing analysis
      (STA).

   *  funcsim - Output a Verilog netlist to be used for functional
      simulation. The output netlist is not suitable for synthesis.

   *  timesim - Output a Verilog netlist to be used for timing simulation.
      The output netlist is not suitable for synthesis.

  -lib - (Optional) Create a separate Verilog file for each library used by
  the design.

  Note: The -library option can only be used for simulation. Vivado synthesis
  will treat all Verilog files as being in the default work library.

  -port_diff_buffers - (Optional) Add the differential pair buffers and
  internal wires associated with those buffers into the output ports list.
  This argument is only valid when -mode pin_planning or -mode synth_stub is
  specified.

  -write_all_overrides [ true | false ] - (Optional) Write parameter
  overrides, in the design to the Verilog output even if the value of the
  parameter is the same as the defined primitive default value. If the option
  is false then parameter values which are equivalent to the primitive
  defaults are not output to the Verilog file. Setting this option to true
  will not change the result but makes the output Verilog more verbose.

  -keep_vcc_gnd - (Optional) By default, when writing a nelist for
  simulation, or from an IP integrator block design, the Vivado Design Suite
  replaces VCC and GND primitives, and the nets they drive, with literal
  constants on each of the loads on the net. The -keep_vcc_gnd option
  disables this default behavior and preserves the VCC or GND primitives.

  -rename_top <arg> - (Optional) Rename the top module in the output as
  specified. This option only works with -mode funcsim or -mode timesim to
  allow the Verilog netlist to plug into top-level simulation test benches.

  -sdf_anno [ true | false ] - (Optional) Add the $sdf_annotate statement to
  the Verilog netlist. Valid values are true (or 1) and false (or 0). This
  option only works with -mode timesim, and is set to false by default.

  -sdf_file <arg> - (Optional) The path and filename of the SDF file to use
  when writing the $sdf_annotate statement into the output Verilog file. When
  not specified, the SDF file is assumed to have the same name and path as
  the Verilog output specified by <file>, with a file extension of .sdf. The
  SDF file must be separately written to the specified file path and name
  using the write_sdf command.

  -force - (Optional) Overwrite the Verilog files if they already exists.

  -include_xilinx_libs - (Optional) Write the simulation models directly in
  the output netlist file rather than pointing to the libraries by reference.

  -logic_function_stripped - (Optional) Hides the INIT values for LUTs & RAMs
  by converting them to fixed values in order to create a netlist for debug
  purposes that will not behave properly in simulation or synthesis.

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  -verbose - (Optional) Temporarily override any message limits and return
  all messages from this command.

  Note: Message limits can be defined with the set_msg_config command.

  <file> - (Required) The path and filename of the Verilog file to write. The
  path is optional, but if one is not provided the Verilog file will be
  written to the current working directory, or the directory from which the
  Vivado tool was launched.

Examples:

  The following example writes a Verilog simulation netlist file for the
  whole design to the specified file and path:

    write_verilog C:/Data/my_verilog.v 
    

  In the following example, because the -mode timesim and -sdf_anno options
  are specified, the $sdf_annotate statement will be added to the Verilog
  netlist. However, since the -sdf_file option is not specified, the SDF file
  is assumed to have the same name as the Verilog output file, with an .sdf
  file extension:

    write_verilog C:/Data/my_verilog.net -mode timesim -sdf_anno true 
    

  Note: The SDF filename written to the $sdf_annotate statement will be
  my_verilog.sdf.

  In the following example, the functional simulation mode is specified, the
  option to keep VCC and GND primitives in the output simulation netlist is
  enabled, and the output file is specified:

    write_verilog -mode funcsim -keep_vcc_gnd out.v 
    

See Also:

   *  write_sdf
   *  write_vhdl
help phys_opt_design
phys_opt_design

Description: 
Optimize the current placed netlist.

Syntax: 
phys_opt_design  [-fanout_opt] [-placement_opt] [-routing_opt]
                 [-slr_crossing_opt] [-rewire] [-insert_negative_edge_ffs]
                 [-critical_cell_opt] [-dsp_register_opt] [-bram_register_opt]
                 [-uram_register_opt] [-bram_enable_opt] [-shift_register_opt]
                 [-hold_fix] [-aggressive_hold_fix] [-retime]
                 [-force_replication_on_nets <args>] [-directive <arg>]
                 [-critical_pin_opt] [-clock_opt] [-path_groups <args>]
                 [-tns_cleanup] [-sll_reg_hold_fix] [-quiet] [-verbose]

Usage: 
  Name                          Description
  -----------------------------------------
  [-fanout_opt]                 Do cell-duplication based optimization on 
                                high-fanout timing critical nets
  [-placement_opt]              Do placement based optimization on timing 
                                critical nets
  [-routing_opt]                Do routing based optimization on timing 
                                critical nets
  [-slr_crossing_opt]           Do placement optimization of SLR-crossing 
                                timing critical nets
  [-rewire]                     Do rewiring optimization
  [-insert_negative_edge_ffs]   Insert negative edge triggered FFs for hold 
                                optimization
  [-critical_cell_opt]          Do cell-duplication based optimization on 
                                timing critical nets
  [-dsp_register_opt]           Do DSP register optimization
  [-bram_register_opt]          Do BRAM register optimization
  [-uram_register_opt]          Do UltraRAM register optimization
  [-bram_enable_opt]            Do BRAM enable optimization
  [-shift_register_opt]         Do Shift register optimization
  [-hold_fix]                   Attempt to improve slack of high hold 
                                violators
  [-aggressive_hold_fix]        Attempt to aggressively improve slack of high
                                hold violators
  [-retime]                     Do retiming optimization
  [-force_replication_on_nets]  Force replication optimization on nets
  [-directive]                  Mode of behavior (directive) for this 
                                command. Please refer to Arguments section of
                                this help for values for this option
                                Default: Default
  [-critical_pin_opt]           Do pin-swapping based optimization on timing 
                                critical nets
  [-clock_opt]                  Do clock skew optimization in post-route 
                                optimization
  [-path_groups]                Work only on specified path groups
  [-tns_cleanup]                Work on all nets in the design that meet 
                                criteria for the specified optimizations to 
                                improve design tns
  [-sll_reg_hold_fix]           Do hold fixing on SLL Tx-Rx paths
  [-quiet]                      Ignore command errors
  [-verbose]                    Suspend message limits during command 
                                execution

Categories: 
Tools

Description:

  Performs timing-driven optimization on the negative-slack paths of a
  design. A path should have negative slack near the worst negative slack
  (WNS) to be considered for optimization. Optimization will not be performed
  on designs without negative slack.

  This optional command can be run for post-place or post-route optimizations.

  Note: Because physical optimization requires timing data that is only
  available after placement, the command cannot be run prior to placement.
  However, the write_iphys_opt_tcl and read_iphys_opt_tcl commands let you
  write out the physical optimizations performed on the post-placed design,
  and then apply those optimizations to the design netlist prior to
  placement. Refer to the Vivado Design Suite User Guide: Implementation
  (UG904) for more information on interactive physical optimization.

  Post-place phys_opt_design performs the following optimizations by default:

   *  high-fanout optimization

   *  placement-based optimization of critical paths

   *  rewire

   *  critical-cell optimization

   *  DSP register optimization

   *  BRAM register optimization

   *  URAM register optimization

   *  a final fanout optimization

  Note: Using command-line options for specific optimizations results in
  phys_opt_design performing only the specified optimizations and disabling
  all others, even the ones that are usually performed by default.

  Post-route phys_opt_design performs the following optimizations by default:

   *  placement-based optimization of critical paths

   *  routing optimization

   *  rewire

   *  critical-cell optimization

  Physical optimizations involve replication, re-timing, hold fixing, and
  placement improvement. The phys_opt_design command automatically performs
  all necessary netlist and placement changes.

  To perform re-timing you must specify the -retime option, or the -directive
  AddRetime option.

  To perform hold fixing you must specify the -hold_fix option, or the
  -directive ExploreWithHoldFix option.

  If the phys_opt_design command is used iteratively, the subsequent run
  optimizes the results of the prior run.

  Note: The phys_opt_design can be multi-threaded to speed the process. Refer
  to the set_param command for more information on setting the
  general.maxThreads parameter.

  The command reports each net processed, a summary of any optimizations
  performed, and the WNS before and after optimization. Replicated objects
  are named by appending _replica to the original object name, followed by
  the replicated object count.

Arguments:

  -fanout_opt - (Optional) Performs delay-driven optimization on high-fanout
  timing critical nets, by replicating drivers to reduce delay.

  Note: The -fanout_opt argument is optional, as are the other optimizations.
  However this optimization is run by default unless explicitly overridden by
  another optimization.

  -placement_opt - (Optional) Moves cells to reduce delay on timing-critical
  nets.

  -routing_opt - (Optional) Performs routing optimization on timing-critical
  nets to reduce delay.

  -slr_crossing_opt - (Optional) Performs post-place or post-route
  optimizations to improve the path delay of inter-SLR connections. The
  optimization adjusts the locations of the driver, load, or both along the
  SLR crossing after potential replication. For use with UltraScale and
  UltraScale+ devices.

  -rewire - (Optional) Refactors logic cones to reduce logic levels and
  reduce delay on critical signals.

  -insert_negative_edge_ffs - (Optional) Inserts negative edge triggered FFs
  for hold optimization.

  -critical_cell_opt - (Optional) Replicates cells on timing critical nets to
  reduce delays.

  -dsp_register_opt - (Optional) Improves critical path delay by moving
  registers from slices to DSP blocks, or from DSP blocks to slices.

  -bram_register_opt - (Optional) Improves critical path delay by moving
  registers from slices to block RAMs, or from block RAMs to slices.

  -uram_register_opt - (Optional) Improves critical path delay by moving
  registers across the URAM cell boundary, from slices into URAMs, or from
  URAMs to slices.

  -bram_enable_opt - (Optional) The block RAM enable optimization improves
  timing on critical paths involving power-optimized block RAMs.
  Pre-placement block RAM power optimization restructures the logic driving
  block RAM read and write enable inputs to reduce dynamic power consumption.
  After placement the restructured logic may become timing-critical. The
  block RAM enable optimization reverses the enable-logic optimization to
  improve the slack on the critical enable-logic paths.

  -shift_register_opt - (Optional) Performs shift register optimization to
  improve timing on negative slack paths between shift register cells (SRLs)
  and other logic cells. If there are timing violations to or from shift
  register cells (SRL16E or SRLC32E), the optimization extracts a register
  from the beginning or end of the SRL register chain and places it into the
  logic fabric to improve timing. The optimization shortens the wire length
  of the original critical path. Refer to the Vivado Design Suite User Guide:
  Implementation (UG904) for more information.

  -hold_fix - (Optional) Performs optimizations to insert data path delay to
  fix hold time violations.

  -aggressive_hold_fix - (Optional) Performs optimizations to insert data
  path delay to fix hold time violations. Considers significantly more hold
  violations than the standard hold fix algorithm.

  -retime - (Optional) Re-time registers forward through combinational logic
  to balance path delays.

  -force_replication_on_nets <args> - (Optional) Forces the drivers of the
  specified net objects to be replicated, regardless of timing slack. This
  option requires the use of the get_nets command to specify net objects.
  Replication is based on load placements and requires manual analysis to
  determine if replication is sufficient. If further replication is required,
  nets can be replicated repeatedly by successive commands.

  -directive <arg> - (Optional) Directs the mode of physical optimization
  with specific design objectives. Only one directive can be specified for a
  single phys_opt_design command, and values are case-sensitive. Supported
  values include:

   *  Explore - Run different algorithms in multiple passes of optimization,
      including replication for very high fanout nets.

   *  ExploreWithHoldFix - Run different algorithms in multiple passes of
      optimization, including hold violation fixing and replication for very
      high fanout nets.

   *  ExploreWithAggressiveHoldFix - Run different algorithms in multiple
      passes of optimization, including aggressive hold violation fixing and
      replication for very high fanout nets.

   *  AggressiveExplore - Similar to Explore but with different optimization
      algorithms and more aggressive goals.

   *  AlternateReplication - Use different algorithms for performing critical
      cell replication.

   *  AggressiveFanoutOpt - Uses different algorithms for fanout-related
      optimizations with more aggressive goals.

   *  AlternateFlowWithRetiming - Perform more aggressive replication and DSP
      and BRAM optimizations, and enable register re-timing.

   *  AddRetime - Performs the default phys_opt_design flow and adds re-timing.

   *  RuntimeOptimized - Provides a reduced set of physical optimizations
      with the shortest runtime. Use this directive when compile time
      reduction is more important than design performance. RuntimeOptimized
      includes fanout_opt, critical_cell_opt, placement_opt, and
      bram_enable_opt.

   *  RQS - Instructs phys_opt_design to select the phys_opt_design directive
      specified by the report_qor_suggestion strategy suggestion. Requires an
      RQS file with a strategy suggestion to be read in prior to calling this
      directive. See report_qor_suggestions -help for more details.


   *  Default - Run phys_opt_design with default settings.

  Refer to the Vivado Design Suite User Guide: Implementation (UG904) for
  more information on the effects of each directive.

  Note: The -directive option controls the overall optimization strategy, and
  is not compatible with any specific optimization options. It can only be
  used with -quiet and -verbose.

  -critical_pin_opt - For LUT inputs, this optimization performs remapping of
  logical pins to physical pins, also known as pin-swapping, to improve
  critical path timing. A critical path traversing a logical pin that has
  been mapped to a slow physical pin, such as A1 or A2, is reassigned to a
  faster physical pin, such as A6 or A5 if it improves timing.

  Note: A cell with a LOCK_PINS property will be skipped and the cell will
  retain the pin mapping specified by LOCK_PINS. Logical-to-physical pin
  mapping can be obtained with get_site_pins for a selected logical pin
  object.

  -clock_opt - (Optional) Perform clock skew optimization during post-route
  optimization. Insert global clock buffers to delay destination clocks to
  improve setup on critical paths.

  -path_groups <args> - (Optional) Perform optimizations on the specified
  path groups only.

  -tns_cleanup - (Optional) This option can be used with the
  -slr_crossing_opt option. This performs a Total Negative Slack (TNS)
  cleanup, which supports optimizing SLR crossing paths while allowing some
  slack degradation on other paths, as long as the overall WNS does not
  degrade. This is applicable to UltraScale and UltraScale+ devices.

  -sll_reg_hold_fix - (Optional) Performs SLL register hold fix optimization.
  You can use this option when the router is having trouble resolving hold
  violations on SLR crossing paths.

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  -verbose - (Optional) Temporarily override any message limits and return
  all messages from this command.

  Note: Message limits can be defined with the set_msg_config command.

Examples:

  The following example performs a physical optimization of the current
  post-placement design, and then writes the iphys_opt Tcl script for use
  before placement:

    
    phys_opt_design  
    write_iphys_opt_tcl C:/Data/my_iphys_opt.tcl 
    

  This example sets the LOCK_PINS property on the specified cell, then
  performs physical optimizations including register re-timing, optimization
  of registers across DSP blocks and block RAMs, and pin swapping (excluding
  the locked pins) to improve timing:

    
    set_property LOCK_PINS {I3:A1 I2:A4} [get_cell cpuEngine/qmem_dack_reg_i_1]  
    phys_opt_design -retime -dsp_register_opt -bram_register_opt \  
       -critical_pin_opt 
    

  This example directs phys_opt_design to run more iterations, with hold
  violation fixing, to achieve potentially better results:

    
    phys_opt_design -directive ExploreWithHoldFix 
    

  This example directs phys_opt_design to consider more nets for replication:

    phys_opt_design -directive AggressiveFanoutOpt 
    

See Also:

   *  get_pins
   *  get_site_pins
   *  opt_design
   *  place_design
   *  power_opt_design
   *  read_iphys_opt_tcl
   *  route_design
   *  write_iphys_opt_tcl
help power_opt_design
power_opt_design

Description: 
Optimize dynamic power using intelligent clock gating

Syntax: 
power_opt_design  [-quiet] [-verbose]

Usage: 
  Name        Description
  -----------------------
  [-quiet]    Ignore command errors
  [-verbose]  Suspend message limits during command execution

Categories: 
Power

Description:

  Optimizes the dynamic power consumption of the design by changing clock
  gating to take advantage of clock enable on a flop. Clock gating
  optimizations are automatically performed on the entire design to improve
  power consumption while making no changes to the existing logic or the
  clocks that would alter the behavior of the design.

  You can configure the power optimization to include or exclude specific
  cells using the set_power_opt command.

  Note: Block RAM power optimizations are performed by default with the
  opt_design command. You can disable BRAM optimization by changing the
  defaults of opt_design, or by excluding specific cells from optimization
  using the set_power_opt command.

  You can also use the read_saif command prior to optimization, and
  power_opt_design will consider the activity data while optimizing the
  design.

  You can run power optimization after synthesis, or after placement. When
  run before placement, this command optimizes the design to save power. When
  run after placement, this command optimizes the design to save power while
  preserving timing. Running after placement limits the optimizations
  available to the power_opt_design command. To achieve the best results, the
  command should be run prior to placement.

Arguments:

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  -verbose - (Optional) Temporarily override any message limits and return
  all messages from this command.

  Note: Message limits can be defined with the set_msg_config command.

Examples:

  The following example performs power optimization of the open design:

    power_opt_design 
    

  This example optimizes the design, excluding the BRAM power optimization by
  specifying the optimizations to run, and then runs power optimization on
  the design:

    opt_design -retarget -propconst -sweep  
    power_opt_design 
    

See Also:

   *  opt_design
   *  phys_opt_design
   *  read_saif
   *  report_power
   *  report_power_opt
   *  set_power_opt
help report_power
report_power

Description: 
Run power estimation and display report

Syntax: 
report_power  [-no_propagation] [-hier <arg>] [-hierarchical_depth <arg>]
              [-vid] [-advisory] [-file <arg>] [-name <arg>] [-format <arg>]
              [-xpe <arg>] [-l <arg>] [-return_string] [-append] [-rpx <arg>]
              [-quiet] [-verbose]

Usage: 
  Name                   Description
  ----------------------------------
  [-no_propagation]      Disables the propagation engine to estimate the 
                         switching activity of nets.
  [-hier]                Hierarchy report style (logic, power, or all)
                         Default: power
  [-hierarchical_depth]  Specifies the depth level for textual hierarchical 
                         report
                         Default: 4
  [-vid]                 Voltage ID (VID) of device is used
  [-advisory]            Dump power advisory text report
  [-file]                Filename to output results to. (send output to 
                         console if -file is not used)
  [-name]                Output the results to GUI panel with this name
  [-format]              Format for the power estimation report: text, xml
                         Default: text
  [-xpe]                 Output the results to XML file for importing into 
                         XPE
  [-l]                   Maximum number of lines to report in detailed 
                         reports (l >= 0)
                         Default: 10
  [-return_string]       return report as string
  [-append]              append power report to end of file
  [-rpx]                 Filename to output interactive results to.
  [-quiet]               Ignore command errors
  [-verbose]             Suspend message limits during command execution

Categories: 
Report, Power

Description:

  Run power analysis on the current design, and report details of power
  consumption based on the current operating conditions of the device, and
  the switching rates of the design. The operating conditions can be set
  using the set_operating_conditions command. The switching activity can be
  defined using the set_switching_activity command.

  Switching activity can also be read in from an SAIF file with the read_saif
  command. The Vivado tool will annotate the design nodes with activity from
  the SAIF file and estimate power appropriately.

  Power analysis requires an open synthesized design, or implemented design.

  Note: By default the report is written to the Tcl console or STD output.
  However, the results can also be written to a file or returned as a string
  if desired.

Arguments:

  -no_propagation - (Optional) For all undefined nodes power analysis uses a
  vector-less propagation engine to estimate activity. This argument disables
  the propagation engine for a faster analysis of the design.

  -hier [ power | logic | all ] - (Optional) Displays the summary power
  consumption for each level of design hierarchy (power), or the power
  broken-down for different logic elements of the hierarchy (logic), or both
  the power summary and the different logic elements of the design hierarchy
  (all). The default is power.

  -hierarchical_depth <arg> - (Optional) Specifies the depth of the hierarchy
  to report in the "By hierarchy" section of the power report. The default
  depth is 4, which means that it will report the top-level and three
  hierarchical levels of child instances by default. A depth of 0 will report
  all levels of hierarchy. This option is only for textual power report and
  does not impact GUI or rpx reports.

  -vid - (Optional) Use the Voltage ID bit of the target device. Voltage
  identification is a form of adaptive voltage scaling (AVS) that enables
  certain devices in the Virtex-7 family to be operated at a reduced voltage
  of 0.9V while delivering the same specified performance of a device
  operating at the nominal supply voltage of 1.0V. Voltage identification
  capable devices consume approximately 30% lower worst case (maximum) static
  power and correspondingly dissipate less heat.

  -advisory - (Optional) Adds the Advisory table to the Power Report checking
  the design for abnormal switching activity on control signals. This is the
  same table produced by the Power Constraints Advisor feature in the Vivado
  IDE.

  -file <arg> - (Optional) Write the report into the specified file. The
  specified file will be overwritten if one already exists, unless -append is
  also specified.

  Note: If the path is not specified as part of the file name, the file will
  be written into the current working directory, or the directory from which
  the tool was launched.

  -append - (Optional) Append the output of the command to the specified file
  rather than overwriting it.

  Note: The -append option can only be used with the -file option.

  -name <arg> - (Optional) Specifies the name of the results set to report
  the results to.

  -format [ text | xml ] - (Optional) The default format of the output report
  is text. You can also output an XML report. XML output is only valid when
  -file is specified, and cannot be used with -append.

  -xpe <arg> - (Optional) Output the results to an XML file for importing
  into the Xilinx Power Estimator spreadsheet tool. Refer to Xilinx Power
  Estimator User Guide (UG440) for more information.

  -l <arg> - (Optional) Maximum number of lines to report in the Detailed
  Reports section. Valid values are greater than or equal to 0.

  Note: This options also triggers additional levels of detail in the
  Detailed Report section that are not reported when -l is not specified.

  -return_string - (Optional) Directs the output to a Tcl string rather than
  to the standard output. The Tcl string can be captured by a variable
  definition and parsed or otherwise processed.

  Note: This argument cannot be used with the -file option.

  -rpx <arg> - (Optional) Specify the file name and path of an Xilinx report
  file (RPX) to write. This is different from writing the report results to a
  file using the -file argument. The RPX file is an interactive report that
  contains all the report information and can be reloaded into memory in the
  Vivado Design Suite using the open_report command. You should add a .rpx
  file extension to the specified file name, as the Vivado tool will not
  automatically assign a file extension.

  Note: If the path is not specified as part of the file name, the file will
  be written into the current working directory, or the directory from which
  the tool was launched.

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  -verbose - (Optional) Temporarily override any message limits and return
  all messages from this command.

  Note: Message limits can be defined with the set_msg_config command.

Examples:

  The following example performs power analysis, without net propagation, and
  writes the results to an XML file for use in XPE:

    report_power -no_propagation -xpe C:/Data/design1.xpe

See Also:

   *  read_saif
   *  set_switching_activity
   *  set_operating_conditions
help read_saif
read_saif

Description: 
Import simulation data in saif format

Syntax: 
read_saif  [-strip_path <arg>] [-no_strip] [-out_file <arg>] [-quiet]
           [-verbose] <file>

Usage: 
  Name           Description
  --------------------------
  [-strip_path]  Specifies the name of the instance of the current design as 
                 it appears in the SAIF file
  [-no_strip]    Do not strip first two levels of hierarchy from SAIF file
  [-out_file]    Specifies the name of the output file that contains nets 
                 that could not be matched
  [-quiet]       Ignore command errors
  [-verbose]     Suspend message limits during command execution
  <file>         Specifies the name of the SAIF file to be read

Categories: 
FileIO, Power, Simulation

Description:

  Reads a Switching Activity Interchange Format (SAIF) file for use during
  power analysis by the report_power command, or power optimization by
  power_opt_design. The read_saif command will annotate the design nodes with
  activity from the SAIF file and estimate power appropriately.

  Running report_power or power_opt_design after reading the SAIF file will
  use the activity rates from the specified file during optimization and
  analysis.

Arguments:

  -strip_path <arg> - (Optional) Strip the specified instance path prefix
  from elements in the SAIF file to allow them to be mapped properly to
  instances in the current design.

  Note: The instance path specified should not begin with a '/'. The
  read_saif parser looks for design net names, which do not have a leading
  '/'.

  -no_strip - (Optional) Do not strip first two levels of hierarchy from the
  SAIF file.

  -out_file <arg> - (Optional) The name of an output file where unmatched
  nets and other messages are reported. This file is created during the
  import of the SAIF file. If the -out_file option is not specified, the
  information is not saved to a file.

  Note: If the path is not specified as part of the file name, the tool will
  write the specified file to the current working directory, or the directory
  from which the tool was launched.

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  -verbose - (Optional) Temporarily override any message limits and return
  all messages from this command.

  Note: Message limits can be defined with the set_msg_config command.

  <file> - (Required) The name of the SAIF file to read.

  Note: If the path is not specified as part of the file name, the tool will
  search for the specified file in the current working directory and then in
  the directory from which the tool was launched.

Examples:

  The following example:

    read_saif -strip_path design/top/F1 C:/Data/design1.saif 
    

See Also:

   *  power_opt_design
   *  report_power
quit
INFO: [Common 17-206] Exiting Vivado at Tue Jun  7 23:00:58 2022...
